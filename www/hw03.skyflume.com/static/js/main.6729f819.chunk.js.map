{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generateSecret","sec","length","digit","Math","floor","random","includes","push","join","App","useState","secret","setSecret","guesses","setGuesses","text","setText","badFlag","setBadFlag","bullreports","setBullReports","cowreports","setCowReports","winFlag","setWinFlag","warning","guess","textArr","split","isNaN","Set","size","concat","reps","secArray","bulls","cows","i","getReport","className","type","value","onChange","ev","vv","target","onKeyPress","key","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAMA,SAASA,IAKP,IAHA,IAAIC,EAAM,GAGHA,EAAIC,OAAS,GAAG,CACrB,IAAIC,EAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,UACvBL,EAAIM,SAASJ,IAChBF,EAAIO,KAAKL,GAGb,OAAOF,EAAIQ,KAAK,IAiIHC,MA7Hf,WAAgB,IAAD,EACeC,mBAASX,KADxB,mBACNY,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIiBN,oBAAS,GAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKyBR,mBAAS,IALlC,mBAKNS,EALM,KAKOC,EALP,OAMuBV,mBAAS,IANhC,mBAMNW,EANM,KAMMC,EANN,OAOiBZ,oBAAS,GAP1B,mBAONa,EAPM,KAOGC,EAPH,KASTC,EAAU,KA2Bd,SAASC,IAEP,IAAIC,EAAUZ,EAAKa,MAAM,IAGzB,IAAIL,GAA8B,IAAnBV,EAAQZ,OAIvB,GAAmB,GAAfc,EAAKd,QAAe4B,MAAMd,IAC3B,IAAIe,IAAIH,GAASI,OAAShB,EAAKd,OAC5BiB,GAAW,GACXF,EAAQ,QAET,CACCE,GAAW,GACXJ,EAAWD,EAAQmB,OAAOjB,IAE1B,IAAIkB,EAeZ,SAAmBN,GAIjB,IAHA,IAAIO,EAAWvB,EAAOiB,MAAM,IACxBO,EAAQ,EACRC,EAAO,EACFC,EAAI,EAAGA,EAAI,EAAGA,IACjBV,EAAQU,KAAOH,EAASG,GAC1BF,IAEOD,EAAS5B,SAASqB,EAAQU,KACjCD,IAGJ,MAAO,CAACD,EAAOC,GA3BEE,CAAUX,GAErBP,EAAeD,EAAYa,OAAOC,EAAK,KACvCX,EAAcD,EAAWW,OAAOC,EAAK,KAErB,IAAZA,EAAK,IACPT,GAAW,GAGbR,EAAQ,KA8BhB,OAnFIC,EACFQ,EAAU,oEAEHF,EACPE,EAAU,uDAA0Bd,EAA1B,4BAEgB,IAAnBE,EAAQZ,SACfwB,EAAU,wDAA2Bd,MA6ErC,sBAAK4B,UAAU,MAAf,UACE,gDACA,8BACE,uBAAOC,KAAK,OAAOC,MAAO1B,EAAM2B,SAlEtC,SAAoBC,GAClB,IAAIC,EAAKD,EAAGE,OAAOJ,MACnBzB,EAAQ4B,IAiE4BE,WAbtC,SAAkBH,GACD,UAAXA,EAAGI,KACLrB,OAYE,wBAAQsB,QAAStB,EAAjB,mBACA,wBAAQsB,QAhFd,WACEpC,EAAUb,KACVe,EAAW,IACXE,EAAQ,IACRE,GAAW,GACXE,EAAe,IACfE,EAAc,IACdE,GAAW,IAyEP,sBAECC,EACH,0CAAaZ,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,OAEA,0CAAaR,EAAQ,GAArB,YAAkCM,EAAY,GAA9C,SACOE,EAAW,GADlB,WC9HS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6729f819.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'milligram';\n\nimport './App.css';\n\n\nfunction generateSecret() {\n\n  var sec = [];\n\n  // ensure each randomly generated digit is not repeated\n  while (sec.length < 4) {\n    var digit = Math.floor(Math.random() * 10); // random digit from 0-9\n    if (!sec.includes(digit)) {\n      sec.push(digit);\n    }\n  }\n  return sec.join(\"\");\n\n}\n\nfunction App() {\n  const [secret, setSecret] = useState(generateSecret());\n  const [guesses, setGuesses] = useState([]);\n  const [text, setText] = useState(\"\");\n  const [badFlag, setBadFlag] = useState(false);\n  const [bullreports, setBullReports] = useState([]);\n  const [cowreports, setCowReports] = useState([]);\n  const [winFlag, setWinFlag] = useState(false);\n\n  let warning = null;\n  if (badFlag) {\n    warning = <p> Input must be four unique digits! </p>;\n  }\n  else if (winFlag) {\n    warning = <p> You won! Secret was: {secret} Reset to play again. </p>\n  }\n  else if (guesses.length === 8) {\n    warning = <p>Game over! Secret was: {secret}</p>;\n  }\n\n  function reset() {\n    setSecret(generateSecret());\n    setGuesses([]);\n    setText(\"\");\n    setBadFlag(false);\n    setBullReports([]);\n    setCowReports([]);\n    setWinFlag(false);\n  }\n\n  // this function is attributed to Nat Tuck's lecture 4 class code\n  function updateText(ev) {\n    let vv = ev.target.value;\n    setText(vv);\n  }\n\n  function guess() {\n\n    var textArr = text.split('');\n    // if the text is not 4 numbers long, is not a number, or contains duplicate\n    // digits, we display a message and discard the text\n    if (winFlag || guesses.length === 8) {\n      return;\n    }\n\n    if (text.length != 4 || isNaN(text)\n    || new Set(textArr).size !== text.length) {\n          setBadFlag(true);\n          setText(\"\");\n    }\n    else {\n          setBadFlag(false);\n          setGuesses(guesses.concat(text));\n\n          let reps = getReport(textArr);\n\n          setBullReports(bullreports.concat(reps[0]));\n          setCowReports(cowreports.concat(reps[1]));\n\n          if (reps[0] === 4) {\n            setWinFlag(true);\n          }\n\n          setText(\"\");\n\n    }\n\n  }\n\n  function getReport(textArr) {\n    let secArray = secret.split('');\n    let bulls = 0;\n    let cows = 0;\n    for (var i = 0; i < 4; i++) {\n      if (textArr[i] === secArray[i]) {\n        bulls++;\n      }\n      else if (secArray.includes(textArr[i])) {\n        cows++;\n      }\n    }\n    return [bulls, cows];\n  }\n\n  // this function is attributed to Nat Tuck's lecture 4 class code\n  function keyPress(ev) {\n    if (ev.key === \"Enter\") {\n      guess();\n    }\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Bulls and Cows</h1>\n      <p>\n        <input type=\"text\" value={text} onChange={updateText}\n                                        onKeyPress={keyPress}/>\n        <button onClick={guess}>Guess</button>\n        <button onClick={reset}>Reset</button>\n      </p>\n        {warning}\n      <p>Guess 1: {guesses[0]}  Bulls: {bullreports[0]}\n      Cows: {cowreports[0]} </p>\n      <p>Guess 2: {guesses[1]}  Bulls: {bullreports[1]}\n      Cows: {cowreports[1]} </p>\n      <p>Guess 3: {guesses[2]}  Bulls: {bullreports[2]}\n      Cows: {cowreports[2]} </p>\n      <p>Guess 4: {guesses[3]}  Bulls: {bullreports[3]}\n      Cows: {cowreports[3]} </p>\n      <p>Guess 5: {guesses[4]}  Bulls: {bullreports[4]}\n      Cows: {cowreports[4]} </p>\n      <p>Guess 6: {guesses[5]}  Bulls: {bullreports[5]}\n      Cows: {cowreports[5]} </p>\n      <p>Guess 7: {guesses[6]}  Bulls: {bullreports[6]}\n      Cows: {cowreports[6]} </p>\n      <p>Guess 8: {guesses[7]}  Bulls: {bullreports[7]}\n      Cows: {cowreports[7]} </p>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}